%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 637.000000 631.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 637 631
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 637 631
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAE+PingFangHK-Regular 001.003%%CreationDate: 3/25/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAE+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid822 putdup 2 /cid1157 putdup 3 /cid1349 putdup 4 /cid2388 putdup 5 /cid2571 putdup 6 /cid2623 putdup 7 /cid2633 putdup 8 /cid2679 putdup 9 /cid2698 putdup 10 /cid3104 putdup 11 /cid3124 putdup 12 /cid3205 putdup 13 /cid3267 putdup 14 /cid3520 putdup 15 /cid3594 putdup 16 /cid3640 putdup 17 /cid3674 putdup 18 /cid3768 putdup 19 /cid3838 putdup 20 /cid3881 putdup 21 /cid3963 putdup 22 /cid4060 putdup 23 /cid4307 putdup 24 /cid4351 putdup 25 /cid5034 putdup 26 /cid5482 putdup 27 /cid5644 putdup 28 /cid5936 putdup 29 /cid6492 putdup 30 /cid6943 putdup 31 /cid6958 putdup 32 /cid6999 putdup 33 /cid7026 putdup 34 /cid7440 putdup 35 /cid7491 putdup 36 /cid7704 putdup 37 /cid7731 putdup 38 /cid7873 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6B3BB649FE5EF9D1F4CC1A24F88F2BCBAE4716C8F02E7DAD8EBABF667AA32EC49EA3164151D64DF16242CC910433284C09F9B934877073FDB50B4A0302B5BC7DAEB4AB61C94F74D3A9FB2390F59738E0B18AF4114B944D54B5B1703A60759F96F057D90DE0A979A88997FB60451EE7C6797380ED8461DBA369F82CBF3A88E1F938AF6F8C8F049E733BA2B314098DA0B54E7228F439DC1B6D83F6946D941F7E84540BD4B2561BE0776C7F3CE526D0FDA5892B16DEB3E2D31CA459295084BEADE55CEF72B0A123260E6CCD177D2EC9FA154A536C11D91C0BD7140653D3CFEDFE42F898E35916753BC8C799490E9BAA97EC413383C8C9116980D733F0E8640953F1E421940AE9CB3F324DD6E9269022677FFEBE1B54E6E457821682FFA37E58C3066BB9ACF75AA5E3DED39119926829CF7D15293543D401917B6A6B894EBF4A69FA8669A89183EE769DDF003CD9B591040B20A82C5BEC5DFD07ACFFB18E8D7D5ADC153EA001F4B96B92AEC7C7C0BA2BD89E9E477FA4ACE313D14A61940E94F1BE5B4A0995DF741228AD5B7E5D2291B265D04394A5DF0C2208E671F119E7EA5000633277BD72F1438F0615C8647621797D06714A839FA08A1401AE49F377D20E34BB3FDC12623D381719582E1BC3A94B8C033CA591C96C7E0838EC6ADDEEB5BC9ACC82223C2282657D2BCEAEB676D38CC08E69AFCF07410718A61C911E7E9CF9CD8BBCDABCA8ED0E0416B99492A87CA0BBDF63883D382A908FE31022E576CCC5A2A57089F1BF045D0D57631B8A9415190D9BF199D4DDFB8D2E239BF77FCCB5ABDC0569E83492FE88C31FD8EBA07D910BDC29F2DDAF577A9058F353956804F2098AC2C1205D5A9F2551A18996F339D9BD419263EC731DEB0BCE74EC0CDE8EFC00DAED929155F8CE2A42FB61E08085C2915FCE03E79F0E6B393FE799F59A4DFDADE10121AFFB138E37C9C91AF09AC6C9615587B2094FAC8AB53169F354E20E66EAD08EE860E67C5B802529CBBECF7D01644F4CA4420B709DEEBAA1EBEC061E4BDC9DAA2EEA4D6FED4083E4DAB53AAB504C26E29D2070EBEB418F042799688FCB12B2B7D16D87EE9F2D95238DC7F1C21BB833059ECF64308588842DBCBACEAF32B6A71352323A430941BA40646585044F92760C5346EE0C86115062B3BC35653AD5679801F93CCE7077C000DBD0C9ECAD95973DEBA6EE76A8ECA75D61DCBE7B66F5B90E53F86E1BDCB02CA246073FF7B029A4FF28F308FA7A1C68E689AD2B13681D0D3CC984E3C1B71DC9A1B47BB5D2974160C81AD0ADCDF787E907C05BA64F002147C39FEFCF0377FF70FC441803790B776409214D145F66A478336954864D5D9F431F92BE4338989A81941F1EBC5CC62BFD5674B30A14F9CB53A6301B5E5D9585B63D8FD0260BA8A3E2B17415C75643C46DCE9604E1AD97929A35DD1D5332AA6C44DB2E435D5947031A30BE268A805E4F3424807F7C6C1DCDEC2B29520644B5C3E9FD2C849FDA70CF2E892E5AE8A31CDA8B66FA30A0CF7D9AE0D0933C44B5973BA74213F4C00E72FEB82D32A129D7BEE4E9FE84C16090150A9729B5E61913EC54178C0CFC3EEF274F4D14ABFA193BE01283DAD6C008FC50DC5EEDE8002E0DDB365F1A1F11CD3ED764A96D57A0B259FF7FE0D44E94B54D25337AE8B2E655911258F3C6E3416D8FD5D889E62AB4AEF99F2807F42E360F551CBE9D395A29EAF16D6DC187DBB84B7A53C3BA461CEFDE7026D7E5A6445D43071DA434BE3E91C1288D9B63158930CE360676B60EE334F33556070B69E7804878CE6D4CD66F234591508D0C398785D5C41BB880463EFD006DDD7C3D4D96F64196E7BB171E58D46E57CA3A5CCE9922C0FC747316F8D4DB9A5930849973AD3FA0E8837A004DB0574A2900EC0C0B791AF77DC45EC809CFA66246E7B58AEDEE8CE96D360F268C051823408B2F5930FDC8D32EE5B0E113F9716E0C157B0E79A6400471C83E2327A50465DF702FAA2670A2377221689D4D00ED0CC2F49C0842EAC40A79B51A43137F212F9215E3B616586E1F1A2A0D33EC207900E1AEFA8265ADE3F4870E3856C4DBF4641D9ECDE265B461A647E5F776B6C60DFC6A6F3EF6238DAA73FEF362028497D60097E96F0F85E2723510D286E14C578CBB4890FDB9C48AC49880EF7E8AFF28DE9C8AF237E2D4F55C0BA0CC71259DA5DF4D4B2A8BE8FCD88B9C5D16313575BA952D0D6EDB1CFDEA5347283F323B63953F916BF22A3681E75C5188DED5F8695C2498E25B08E1AB3185DEC550D040FED079DF97295DDA4C217CE6C6A0281FA2942572E59F9320ED1B58D658AEF260EC96BBA419DE34F66E5FBBAF05DAD1D3EF2BF95F8B27933A57A0624DAED6445C88E234E9C237E19F3DE3FC54B10BBB376E95B1244CDBF016674CDF00912B959EBDC842497E2C6D243B5A45803F1668CF423591D64BBBE3FBE39F544BA647A36E41499ABE5FADF7CD4E3CEE27335BB904654D5A9CFAC49D90FBBC71F73EE026CBB5C37316C34AD9C99D575B650128CA8ED6939C4E1F4A7B11427324CA9BC59FA93C9B8C01EDEEE3A7BB79AC1E556056295F13D51BA1F4B90F889CEF3D3C50E2FAB598758C4B6C252A1028E57680B7813F4EA38A638F35113442DEF1558DC6638C21B13546ABAF39BB87C1F323A60202B4062B5C0AF3466C5AE9F90CCF729C0C1CDE9354CC731B0F8D40B06A1C99C2E34153C7EB9BC0F8FB557558919D1586624FA59D766889C5C7C2F43FE09C3A953BB0A9C2CBE0464809FF4086B2AA0F49FB4D78BA8C58B89BAE158D4D31942F24F69E1234958D223ECD0DDD7F513B6F93C3E55A42B165C0564626F136EDE12E1569F7F595E5DB5B78564D197DC3EE61A30E83BA506D7020F23910A2E3E0E7FCD00902F87E885A604A3FDDE7C388AFC08237059E9030A250A025AA1ED1009EFC3496A7BA18477325AB6D0155B3DF258FC7D11A97AA319C6EA7051F6094662576476A4D9DCF0A0AD88410F55B41EA624F234347CDBB04A3E7AD56C59644A7D4686964C35327538E6DA22219ECBB20314F3598DD3EE0AE88E8B160168F5E1F1E1C155DD732B5E5A75B77125B6AC468E5D6D07092480F9A53157E51989EA02B42F6E6CED9A1550581E7FA595A3FB6FEDE40EB13C24640A71B78CF6AA1A495479DB84C6853B8A0B4AA0E17FC2249DA7E93B5EDF3065F51A54C3AFF2C0285C671764027E83FA500EDFD210866B0129427B59743C3F1FF8E522EA3C1677A8F903E77EDA03E6B22D9AEE83DE17A8046B4D2F2C48D38D74720E13DFD70C58C9E92830A6D79E1DA234DF1596F4FF521319DFCC6F74385B3F9A8DEB34E6E25647A74BDA5ACC5D4588BA25FB11E8DA172FF22F710C0D65CEDC1C2A4ABECDF8A94E674904A868A0696E72B9200A44F610B26B45F0FDE5103C68FFFE9F582F3A4D504CA97E6FF15E2DA7C7F8D184742AD624F9C25CD1A6CFDFD9D212430140B130CA000256F74A82A8F990D71E869DECA5DACD763DA6A8CDBD971F8C0EE459510B9C7639EF850BDEA5F5752B688640A6529CA009F4CAF85F0921DD95791DD105758ADDE52073927C0E7D5AE5A3232D661469C4813E0B470EC4C82F22D5AE8EE885822B04685DACCAAA11954B1D6C65CB3B3965A447DC0B6CDAF5FE42E40F15791737F1BAEC81D01513907701FE797A8DD9F42D97BCA6CC74C602CC7A4B8F01B182E287D8DD507421AF24E29189D8FF6B15382AC15B268B55AEC04846A55A87D771881D8C8D1B93A8A8C002B0AA84ABC245F25614EACCF1FE1DB05D506686757C71C199E421C27E9359246288ED898D88E076B41FCC2701DB101022ADE7BA10A997F724F71AEE464FE2F63C366928BD71CB75C7B3EE07A32A386C899A4D079989ED79605F7D18BE9073EA29B88F0E3CF47CD8BD3880F8B69E2EC7BAB4ADC82D95D4D0A8525B55F9DC22FA18BF82A9B23F0F6EAAF93245D1A6747008727FF7B1F45801A8272A7F71673B30E519AD81BFCEC6A1D43345B2BA5BD11FD837845397EB499CCD2F91986D2AF2A8D0113BCD92874E5586FFBF1AB5C46D9DCE8549EFA845C43D75C18E498917A14676D02BF13C4133F113629379599BC0B6690F53A20EF932C04017D614631434E19F4C6C93F8FCDE4FEC26A39A9DEE54D39AABC968CCD9DBA8625DD0E28DC6F9AA40A70BA6CBDEE75945B6A18618CE414A30EFFC643CD71D414830B5A28923A3AD897B319CDAEDA6270F672D89AA33B39E02A4D5E758CD17E12F3AB14BC920CC93181BCBC516B6BBC0DE5AD690D97565FE4D1E216297B915D5DCA3B01C33E2D03C80C702DBFD80299BD7F58BCFB0417A88BF512DD74EF6632C14A8FA6AA3A60079A1AD60D27EA9045B173705CA09106657D9B38D47A1AF99681F661BF584615C3E1A499593FE999A7C5BE149905ED0B09FC2E93C960AECC975DFA1740387C0F8A9A6ACF3E58A89D4F3895AC3C31A41541DF27B788518670A157A6353EC27CF5AC7274AB00F82885ADB3789F1A9BAC445CF8C3BC2F4AC417D904FBFBC83E75D7330A1DB6B93F8865DEF444D13EDB99B40710FC52D1B949890FF492F5C7E3BEA858A37DBD08E34C214BF7E452F541837CC0025975BEF43D8C2B6E15A78295941B92A37AD2735473D4BEB26154FB4C3D343838771647ABCA67F6EAF1CCBEC058E448F48DC7AD988B4AB97DF20929765557A08BA9F08F7C784508366C3F7CDF10F6F19CE8AA6D825FA351ACCD253F5F8A65718587D327720188B90FCFE071DCEC5077EC0C8F75E0EADBF58859087A7A4E6E7698F3218B0CFECA2E612D0889BB67A649A0F729F63176FE822F01B50FD27254E5BF9E72B0B16AD0C690E552846D82B0B73BDBDCE36BDA9CCF9E9CD4FA94645E60AFB8530DB5F9EA49606EDC6C6B50B1A2CEAB512C46BD22CB7F3C9AE4821496FDEA43C06B98075D5128F30100844DD57008D33ECC0B5A55029E37FE4AC183EC39F0BCE8F1F6BA900672250C2A04DC6DAF58359BBE39BC750021E17CF5A5F43810F1EE9308E1DA77A803D62447E25F5FAB68B8DE43EA2DC7BCBFECDB95292D3745EA48BE426CE6641171E8380BDE135A58385D2D23AC2BC46CF998C2FDC503A62016461F49BF79255813896C4CE83D3A8A44A4675137A9EBD84BA85A54CAF1793D1954FA3136EC1FD2DB9C6781805AFE839EB966A80FDCCBCFB5A12B587B800EBECA4284262660C8B6DAED9429A85B2D3D20F471F23CDBA6C4EB2C59BE28496BB7E7ED98421429A34E5B5987C183348739F96111DEFE7ECDC4EEE6F1463AC093625FD5C15728BA40722D3BC9D3410CE2EA1D135D6B370CBAC742AF140097CE50B57AE6C91A4B350ABB8A4FEC7A425518541297CD37A427AE76EBFF473747A766A22FC61659CD59948B3055897E7E51D7902CB0910EA06D21C6F57B650581E5A7AB0DE3E340D5800C71B0EA1C86ED4643DD284FFDC50736965998CF60A67376C659D08C8FDD48077D48B7E7A3D17A29FAA3DF3E4CE82F2C12B8B816461665C3B1A923BD031476ED38B8ECC51E9A0FB9F4F5D2B0BD5F449D40CBA91D0DD094920FA7C2C50DEFA611C0AD44CDDAEABE1FC22E12C69BA0395FA9DCCB9DDA265DEF3CE000FD2B82FCF4A1B42C98BE6C768D1B0815B2D45B17A0C91DF1268F5CD08B37C69A3703C2DE0153817AFBB2DFD6BC1D3EF855AAFE489AFCC8484FEC6B74267EF5375CC20E0A27F972A88EC755D8D879F530B8810A868CA415CA1EAB83C3FE779BAF40307366FAA065C52717D032164BE8E9E40869CF6BAAA35F09F589F032A07DFC232D45CAAE7D8F50A3363589D8F85581A8FC28DBCD08559F62F6EE79AAA9E58DB70A9C920C5A2E10B7345D58309C6CAC712A6816CA4B466B41DDA0F57AA3F7B343D90471DF41089240D21FD2DCC5EAFFCDC30F24807B7D426EA1D5EFAFD0F675E93BB23DA1E8D6C0FCDF3EA6910191BCF2B2DE95CDD85E08D52C7C1ABBD364DEABA5B33856F51003E35DCFE55DDBDB9785489E1FA959DC0CCAB8CA568175E8745DEEACC0B48AD95EB2DDB7965D35F290B768BE8433D30D4B05D7A511CA3D4C0BFF5B74235D9DB73CF0E931E655797D9039946C756644AD80F158F761E401A3CB049FF1D51F0251A79648818480EF5520EF1B6D56E4BA077D107F335B00C2B8F4CD3323A46B7F6967C72CDE0F87779D28FD85B7C74ECC7F8424997F11D556B9FC408C6B25BB95E34594CC71E61B70F5F6ED9822C8CF0CEB4FF68D128BB7C98E84D30570B59713A74763DFD23788F6B1383C5D9C1A233033B00CFA04FEE01226A01A081DB7507D088658C11B2C649227FD0533F8A350AEB30EE12EB38A7ECAB86B2F7468012F7CD774E76CA38708F7E76F5DFF10B4C71E24BCFED9EEB51A33D61555AAE485D786311A37FDA607AB191A2020558117E820AE1892670C898418830BDC2AFF46663DF0F70434B68359BB8072A65E9F4A9E97458E98C4D616F450909BEA34A6A4CE90BF6C5EBB5F13322A87F7FCC97B6774640C319B2765BEEACBD0CB6BC30A86041E05AB981399407CCF0FFE0FDF65E427441F0953E304AE65C02AA4B3F38DFF126B7345E994294676FD3EACD08FCF9C77CE61CA4A5EA31A78F912CDB084EB36105E6303182D43D284D52A20236EB3523D937597BE869B255730A0F81B48097E2AA1678D75568F9D9C44BADD6C79B02F3E56264D7D538C7F955588C1987D948BD422F081EFADBDD1736879A8DE0E56D83FEBDABE156EE9B46125E2950E996F480AC22AB630687258938986DCB7964BAD8B6CB4C808405022690D07F350958ADF288C6C3B3C1AB46B7C0D3A6DB8000E63CC991A6F831E5141FBC597FB351CEBDFB11D5DB008E5AAFA00D73C83D923492FCDF09C436E816B43D2B7849D276613F6FDAE01F60915624FC53AED5BB57E66459941FFA07CEFE8D7B52C733EF7A8089D0CCBE094F66674B5A0E0D13FC037E24B79E2C85D0C47ECD81B98DDBB0C3B1CF3181154B6BA4A4E8CC3A02F83EE68DA8FCE724A4F72A9C0586BC22FF12449F7E3A656745B48FE164B9CB2F082F6E34A45430C6F1AD5E1B7C581209572C35885632C6B1C7B064E303C58ED5D8707E66B38904C2A831EE3FD20F1E6AEF2DBCBE8F0127247DD8A567209102A4613AFC0A3C557CC05714F170AC2B410982FD0DEF19DD298A53AF928522072746D74FD154DD6FF516EC827570B36F391FC2C4323F1546A20B3A48914408D187130ED2C284AD7358AB0EB537D7B47CACBF52DD4AF074D49A0AD6307F7372413946809E8255E174313C73311D652844D49361E5D301C21FF71E467FA9FB8386BBE005A5A7FE2A615B078CC1BCE8F694E2ED75BF54B63339EEB6E80A3F1BCCBD3A1C9DC3DF47B13105568834E7B99CE1B4A119A250265D174D2BDCC3E95946249A5A717CC8EB67616C8CDAF9EFFB72E4172E3B96314A459B5FA7671A19E416C6AEDC63F222E13483CE51BD522059F70995E375BA64773184572AA747ED25F6A5DA72BFC9ABACB86B6DB4D707A60B1E6DFF55FF2889FE1DF403F542AE5DB54CC79BA6ED71BBB921F80B301CC9A87B67C4328FEC5A2A0826EF7ED50692635FEC82A148EF77505B19742435D57BEB08A2BB49BB487FEF9F1F15B0EF1B85FA7DC0D0E46D0702C54B413834C1CC547E23EDF7FE3311F1B9899AF3C679136FF2940FC94FC7B3772A1DFFCA123E8A6F3214B6679109E95F378877047E794AC13E6933F649AC323539CE71A2FA677227A8C1B998893965BEFB576C6959E4E5C46610E9F323CD7F2297CACE00FA7FAF9F605A63431BA96A760E18929A0FCC690AC66F0F8170B4C2675C901F7CF85F48F85F5B23EB6EE53E75B254464713EBF07026018D6A6E6194B56CBD177BB08883EE27CDA53055AB894F22219A9D6A702AD60CC832778D1E84D347F8FCC9874E96C8E6D183D3587E54B2D84E20DBBFD493D890FE149AEB2B3345C45CC02C8C1B30028651FEE9619AA4F0BAFF5EEB5FE2A084EE6DBB1C2421966B9E19DFF2DAB7DFB126B152F6A39A1A3200D9F5755FB219BD9AE7D9D5FE87EE2940031758967363A0F7BEE54647AAC765B0A78CD7F625C6229134AC4AB6329D79400152E5BADDD2F81363BAB8192146323336B3DBAF9ED08E3EC62CEB47AC3BC98305E84B0010A449872061D16411E8AF95204AB3702F8DF8B3511E498C649C5776B40EDDA0379170ECC67F422A7F3AC1ABCA9CAC0C9F605FF189700A9AC18755086F56A089E3901135A5577883A27A205C24B6F0D772AACB3F39EB5EFDB54B191FFD2C068E8F259D4EDE31AE4326A104D8A65274956EE87ACB5C4F8B1D5DF0A5963D9E5A8830F3B23474B53FC54DB0792E54370E20845BCD9344318BB3A2ABFA5E0276A2809F6B75AB88474D34FC6AFF4FFB0C0D8EA20EA384D7451C3DE73655F8FA288C52D6FDCC67E47EAEF38D7B0A27D1F248A00C4B17C86A40FCA6452271752A9A1D161330CF1072C4596A872B8438FF8C4E06D7E744038A606D5E84450AA5AC6572BE66B1A4C6ED6E500155D729D9A659403A84DBF3AB223EED49D33FE63B256C5B94DD054919B31B110C52BD60C1FCD89613552DD87B1CB90F1E135158FF86A9376253369F80C1D3A919D7B260417AA323C2A7AA2F9FB4335C8A15234820D9A368C7EE736DE9ED9EF9ACF0232006F91063BFEA64CD36F4126F5113991C88427EF7D38BDB22307997C798F96D035FA7F03A9AE4733FD6FCC83BBB04EA872AFF47937F5B43DC881113B145DBAA6251072EEC0BAA7EBC8A050C33D8FFE809441057875BDEEF3AA1488718897C93E32F01B9EBAE28DE0A38E673D75535A43AF983B8E9D606D3A8FFB638A861B630E5E09DCCEB8B22F7F49BB6D0A79F5392A06B73D3D706E1D9BEFA9A89ED83FD5770D69D8E82D067B1C2005A7E73ED132C9B8D31B9BDD0E289791F89B58E8CA17CD81F895706B21AEF74128250F2D067BBC6AEF1FD423F8D24CB9CF10F1DDC3551DAFA4620CF02A848D8AFEC1AAA52A234B96E7C91ECE277813C36AD7234CF933BFCE64656E67E565CDA13DFC7D4ED97E371BD388F168E1E09B0DA0EC71BEE13C8EDF43D9ADA5DCEC397C1A33EB841C4E8FC982C388AA8F268694B7E1B3BDD0509FF6CE762D1F6F7932A5538B5C6CE4F357ABFF7F7CAFEAF288A6608B4F48EEC937AE3579C55D3258B825869842B52C8063761775653789EE3826495CC726C017B690A7D072C2C53FE5AE9210C6D1938319111E1CAE90E942FE062185CAB27997727D74AFC8D1F166FE1FD10EFBE70FDD56957592B912EF3B15CE74918EE9FEA327A48F3E03B5B5C3D6013097D3F41425848D7FDB32C0E8DD986834C0CD4431A9105707D0C547B06C4B6F3099BB261159C39A21834649F045FD5DA573C781FDB79FB0CA9553B1EF76CD644FC5D8FD748ED26C5A398956070CD65A2ABECF19118297D03A1CAC48ABC74D0FA7543364BFE1375926B0E0108B1DF64BD137F82467E84C6DD34062D660C1DD3BA80CBBE6552EEC0FDFC1E05909CA1D92ECCF27F390503FE4DF89B1314F079A23A0FFBEEB86E2849786F0C7A6A632C25CCE4F0D4F957F4BBE21D7CE0A6E929383C897E067CC8D2C6C85FD0805FB29599A7AE59E2BA3247B807D201410C5F05F190B82B20939EFAC81F69F6C4C6F00DD43246EAE0B44944E5924529A26B522C5C23F39F8B49770CF655EF72F94A2DE5C8F48EF344D0E3447FB836FEE972D25A838BAD2019BEE400D7E79FF292E5644CA87859616A9086F14B5A78FC6E2824DDE50DAA12F362201CC92D30E6D14D79EE018C8BF2F5408D82AC617613AAE06C84AEBDBB0020E8912AF5F309B6F394091A8E21C76E778CB19DDC8BE9D059DA272AC9F9BA33220E87566DCE2FFC2ED334B00FCEDB467BE174AB3CF0F4FA62EC13623236924799A012824CEBD6FF28058B6FF9A8DA084682E921770E9CB3A34A0F5BCD1DAB2B30F703EABDD7695767DF940DC4D107201BFA2237DB53F6186353CA941D96D11B55926F2CE02D2956EE6052538B399848B8F0A69CC719CCF274C62B9A29999A9679E79AC475BD18C7B20850944B33EB5AB6E644F2C27203CFFC74783F2EF01195681173297D99B4031D13DC8955B855AEE05D0F9C379CA561860AAC78B7BA416BD01B412906A707652679292C28E54604C62F2E133251E6A2E35591780C091CE00E52E421510ED152BD0C8BCBFBC68F8169300B5F720ACE472A0CDC73A1085A782B5706D810558CEFDE401CAA43ADF2FA6994C5F78C27B8566C784019F35B96F4C22242846B50E12DBAC32B8A288E8A62588391D10135B86CC3A4A019381F5D81242431CB09899A177D0063EA741AD7F59AF23AA9DAEF721D76B4801DA5B6B473F723624B5A024989A6D910914400604FFF7BA2A0C64F26DFDC2B31DD7CDFA6FF32ED5B49B5E3CA6C1AE90F9B7636B9A4FF8093EF96E4577BC8456B6C45EC6F6724D35B42EEA3AB15A994C5BE3B6A5362B08F19CFB443605B58A650C177AB09F54AF1D1C9AA2E4E75378DCF7E43630F46A229C00905903EC2496403FCD69EFAA5468058805BD3D686AE623FB1BF75E50E981130C5531572E8D50E07A75514EE3078B511EBAFAEF7708F1034EEA68D720D67535B47B1F29A96B3B38976138F5A82C7B0C222A82A4F7CB402D15B81BC9D9A708188C89AEDDF1E513439BFED440FFE0C4B01FA8368BEC253A5F9EFBEF8B2E7BAFF5C7D50AD4C39AFF657B78193883DE4170DAA309550BD11223765D7C0524B7F774379D249FFE0C1E0DB893616B40AAF201A6109AFE7398F6AFC012E02959BB5DAAF825070E35FCDDC043E27232B13063A5D6FAF0D6B12463D695FF5FEF8BF68D6166159CBCA41D894CC575811DC4749186B245FE1FF5B869AA4581681AF96346F52EBD4F82579C419A36D7F8068CD9CE1C59CD3CA8AF1725C3C19F1C5C5BF040EC6716FDFEB86D5D087141FD1FCC0106FC01F26F73C5AAF9BE252F8D494CE747CC1D7B9877D6B5F905627C031D9B28BE2B1AEC1A4571EBE51BD5ABADF1406AD1B5CC35F1B04F8DB86FD22DE944EF89FFA630437668FA573DAF244192146623921223EAD21CDC5C9DFBE7493B9D88BD0172B3279F42DC7CF3D5C20B1D198595F94DC35BAFDDBCCACF5BC178051BC9789E039B7F119ACA4B6D4D559DEFBCFA20312CDF3C20EFEE4A18619FC6E55A28EB22440DC5623F1BB77162AB85951921DF9C5DA4BC4CB2B3387D9A8F1D7D149D54E2B132D24EDF9972DE8DA526060A21D82E839615FE346988956CA2B53DB31F0659A02BFD081E4B4E083B11F5F6D96603E0CFE6DC6C46AC90263A3C817538CBD4F98A9BEDB865BEAE61759F0958DD3C24D4F8940B6B82163ABB188F35C3080747C19FD46FACE52714163C5503BC8763BFACB4ECF5A10F6EE04F557D41961E0D0C2CAA7A0159673F2822DD3197941BA0DC53BC878BB297C46FAABB22BFD9EB6B6D4A1914BB8708ECB23EF36293B1C69405F5B614ED53F080F332C97984D47FEF358613C1A2D32BE5651EA4374A0ACC1D30D6F76F6E4FAD881571D9C5945D686616F755E17EE78147555D8DAECB6392F5C8924C382E63BCCB1720A5C5A5A7FD46628B19C9E935B74A13ED3CEE316A8A004DDD98532757020AEFF18FD482C341135E2463BCFD99D33CB7B8A76FC2F79FD85CB34F07685B396F6E0E2C5C0822AD4A4C2B0083CC8A38FAF8E76508423F3EEACA7ADE84691E906B38A26BDB6B9504DE1731D429B43BA7D0E06040D1D70A52B0F5064A48DA33BF740F79DD392D4010741A066AFB68E301B471979A623417D428787490B0053E60F52FF3BE7D18B391390F91EC848A2B169DB6E66C8875F1BA7606CC5271F6BD2B50B7DA2C47DA2C9D0ECE76553621AFD4444848D437DCA1158DB40E81825F834B16B57D0D7B72314BD3AEA3C9B2FE993C4DB55664DDE781BF590A2661D0F205F86E5A10490E6EAAB466F64F6B0E05AE84032801E86A6482654264D3C1B2EB7930B0BF72BAC40DE77F59BE7442F3AB676C0B0E801E5C7ED2641ABF594A6CAC82E6E06ACA75D1A8956AA2E7A540471BB89676ED1C710CD55874DEFD38511F6F0049E3A6F090D0703F84E3303BB43C2F37F01B43A241E603683A44F84993F2C1E603E6CA93802E6F1CE023EFEC3EAB42270D99A974148C1BF520F6661322323C4A1B4654DE745871B4306EE25B5FB1B207FF68EDA4C4C6D0E21653A6494F64BBF4D7F7CCDBC2419F56B5EFBE0B4EFE615913756A5AFA0F8DBFDEC7C6C7CFD5FED0CF56DAAF87505A34872EF0F2472F68CC23194529379FB539D24156E5542C1521E637BD029D12E31884AFE5F0E7CE439446AF333242F3967D078AD2C0CA3871CCBD7F700707BC89A6458962A74A916EF6E5EF4E62CF2EC507E0364503A91614E30A27A237F2E4BDFB48BC07E32F01FC8B2266AEB36FC8B000D5FF9BAD1C0D817724CAC27B7C3C42CD9CF1DC8CA22B7320428A1B0373FE31ACE1C341800E637B9896A441FB7654E671D45BB2EB5C701A147B0784C1A82B3CA3EAC5D911B66E3420CE5BFDF570C4562271F2CF05D553896EF10B7041107066ED3DDB919577101C77B500B4A17DFB8FA3680926A86EAAD578F36CD180CA100E257D3D5817DC429A6182D8F72EADC15D46D92FF1FCB48C419CB051A50F05D6B24BCB8032C0D03B1EA09EB14470C484EDD475C62A0D32D81F47EAADA5F5B0B706A6CE68B8ABDF083689D62E06A5F6026675CAC386F1B4BC00C1CA50176102200992EB7C8AA1DE92632819F66A1D3728C3AB1EF8986CE1E8BEF3DC9BFC9BCDCA2AF8A6855CD727E7DCE131BA16A69DC5FE2DC9480FAA2EE1A07099F819BB0C425D43EFC8E1EA6D48618855288DD2CAFCD47BCF1575BFA8DF86E20C7525D29689E8E56858C937A7C312F233F94EE9A717A1C7DAA9FF213F7D0941C3ED796913397FD307B220E5DA51C7B0E760BF0BB4307EF056DA1EE82E591226EA91994262266B13D9C74F70AB0A03EC4D8D3E1FAE81F02FEF7C7273F7B62094FCD091F98A2694890FB69EAC81789FBEB1910CF57C0909CA59B437970A9DEAC7119F0577658C2785EA8FFB1C22EF6F7A8B9384C4930BB480B6A32424F1F7908527AC725339D2051061403F128A525F342385180456BAC2DAB58D6F948000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid6492 putdup 34 /cid7491 putdup 35 /cid5482 putdup 36 /cid3963 putdup 37 /cid7026 putdup 38 /cid1157 putdup 39 /cid7731 putdup 40 /cid7873 putdup 41 /cid6999 putdup 42 /cid3881 putdup 43 /cid5034 putdup 44 /cid822 putdup 45 /cid2679 putdup 46 /cid3124 putdup 47 /cid5644 putdup 48 /cid3205 putdup 49 /cid1349 putdup 50 /cid3267 putdup 51 /cid7704 putdup 52 /cid3594 putdup 53 /cid3640 putdup 54 /cid2571 putdup 55 /cid2698 putdup 56 /cid4060 putdup 57 /cid5936 putdup 58 /cid3520 putdup 59 /cid2623 putdup 60 /cid2633 putdup 61 /cid3838 putdup 62 /cid2388 putdup 63 /cid3104 putdup 64 /cid3768 putdup 65 /cid6943 putdup 66 /cid4351 putdup 67 /cid4307 putdup 68 /cid6958 putdup 69 /cid3674 putdup 70 /cid7440 putreadonly def/$SubFontArray [/AAAAAE+PingFangHK-Regular findfont ] def/CharProcs 40 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid822 {(\001) 0 $SP} putdup /cid1157 {(\002) 0 $SP} putdup /cid1349 {(\003) 0 $SP} putdup /cid2388 {(\004) 0 $SP} putdup /cid2571 {(\005) 0 $SP} putdup /cid2623 {(\006) 0 $SP} putdup /cid2633 {(\007) 0 $SP} putdup /cid2679 {(\010) 0 $SP} putdup /cid2698 {(\011) 0 $SP} putdup /cid3104 {(\012) 0 $SP} putdup /cid3124 {(\013) 0 $SP} putdup /cid3205 {(\014) 0 $SP} putdup /cid3267 {(\015) 0 $SP} putdup /cid3520 {(\016) 0 $SP} putdup /cid3594 {(\017) 0 $SP} putdup /cid3640 {(\020) 0 $SP} putdup /cid3674 {(\021) 0 $SP} putdup /cid3768 {(\022) 0 $SP} putdup /cid3838 {(\023) 0 $SP} putdup /cid3881 {(\024) 0 $SP} putdup /cid3963 {(\025) 0 $SP} putdup /cid4060 {(\026) 0 $SP} putdup /cid4307 {(\027) 0 $SP} putdup /cid4351 {(\030) 0 $SP} putdup /cid5034 {(\031) 0 $SP} putdup /cid5482 {(\032) 0 $SP} putdup /cid5644 {(\033) 0 $SP} putdup /cid5936 {(\034) 0 $SP} putdup /cid6492 {(\035) 0 $SP} putdup /cid6943 {(\036) 0 $SP} putdup /cid6958 {(\037) 0 $SP} putdup /cid6999 {( ) 0 $SP} putdup /cid7026 {(!) 0 $SP} putdup /cid7440 {(") 0 $SP} putdup /cid7491 {(#) 0 $SP} putdup /cid7704 {($) 0 $SP} putdup /cid7731 {(%) 0 $SP} putdup /cid7873 {(&) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 637 631 rc
0 631 m
653 631 l
653 -25 l
0 -25 l
h
0 631 m
f
0.85490197 0.85490197 0.85490197 sc
20.5 602 m
632.5 602 l
632.5 4 l
20.5 4 l
h
20.5 602 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 631 cm
20.5 29 m
632.5 29 l
632.5 627 l
20.5 627 l
h
20.5 29 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 330.5 318 cm
/F1.1[ 40 0 0 -40 0 0]sf
-240 -156.5 m
(!"#$%&'\(\)*+,)[ 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 0.000000 ] xS
-240 -44.5 m
(-./01&23445,)[ 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 0.000000 ] xS
-240 67.5 m
(6789:&;<=94,)[ 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 40.000000 0.000000 ] xS
/F1.1[ 43 0 0 -43 0 0]sf
-258 183.5 m
(>?@7A&BCDEF,)[ 43.000000 43.000000 43.000000 43.000000 43.000000 43.000000 43.000000 43.000000 43.000000 43.000000 43.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
